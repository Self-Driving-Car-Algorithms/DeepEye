#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 25, 2018 04:38:15 PM
import sys, os

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import driving_assistant.warning_interface.WarningUtils as WarningUtils

FOLDER_PATH = os.path.join(os.getcwd(), 'driving_assistant', 'warning_interface')

def vp_start_warning_interface():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Toplevel()
    #WarningUtils.set_Tk_var()
    top = Warning_Interface (root)
    WarningUtils.init(root, top)
    root.mainloop()

w = None
def create_Warning_Interface(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Warning_Interface (w)
    WarningUtils.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Warning_Interface():
    global w
    w.destroy()
    w = None


class Warning_Interface:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family Ebrima -size 38 -weight bold -slant italic "  \
            "-underline 0 -overstrike 0"
        font18 = "-family {Calibri Light} -size 22 -weight bold -slant"  \
            " roman -underline 0 -overstrike 0"
        font21 = "-family David -size 48 -weight bold -slant italic "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("952x655")
        top.title("DeepEye Copilot")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.EyeBall = ttk.Label(top)
        self.EyeBall.place(relx=0.01, rely=0.02, height=100, width=100)
        self.EyeBall.configure(background="#d9d9d9")
        self.EyeBall.configure(foreground="#000000")
        self.EyeBall.configure(relief=FLAT)
        self.EyeBall.configure(text='''Tlabel''')
        self._img1 = PhotoImage(file=os.path.join(FOLDER_PATH, "eye.gif"))
        self.EyeBall.configure(image=self._img1)

        self.Title = ttk.Label(top)
        self.Title.place(relx=0.15, rely=0.03, height=99, width=610)
        self.Title.configure(background="#d9d9d9")
        self.Title.configure(foreground="#000000")
        self.Title.configure(font=font9)
        self.Title.configure(relief=FLAT)
        self.Title.configure(text='''DeepEye Co-Pilot System''')

        self.ObjectsFrame = LabelFrame(top)
        self.ObjectsFrame.place(relx=0.01, rely=0.18, relheight=0.25, relwidth=0.98)
        self.ObjectsFrame.configure(relief=GROOVE)
        self.ObjectsFrame.configure(foreground="black")
        self.ObjectsFrame.configure(text='''Objects''')
        self.ObjectsFrame.configure(background="#d9d9d9")
        self.ObjectsFrame.configure(width=460)

        self.Pedestrians = ttk.Label(self.ObjectsFrame)
        self.Pedestrians.place(relx=0.11, rely=0.05, height=125, width=125)
        self.Pedestrians.configure(background="#d9d9d9")
        self.Pedestrians.configure(foreground="#000000")
        self.Pedestrians.configure(relief=FLAT)
        self._img2 = PhotoImage(file=os.path.join(FOLDER_PATH, "pedestrian.gif"))
        self.Pedestrians.configure(image=self._img2)

        self.NoPedestrians = ttk.Label(self.ObjectsFrame)
        self.NoPedestrians.place(relx=0.11, rely=0.05, height=125, width=125)
        self.NoPedestrians.configure(background="#d9d9d9")
        #self.Pedestrians.lift(self.NoPedestrians)

        self.Bikes = ttk.Label(self.ObjectsFrame)
        self.Bikes.place(relx=0.43, rely=0.05, height=125, width=130)
        self.Bikes.configure(background="#d9d9d9")
        self.Bikes.configure(foreground="#000000")
        self.Bikes.configure(relief=FLAT)
        self._img3 = PhotoImage(file=os.path.join(FOLDER_PATH, "bike.gif"))
        self.Bikes.configure(image=self._img3)

        self.NoBikes = ttk.Label(self.ObjectsFrame)
        self.NoBikes.place(relx=0.43, rely=0.05, height=125, width=130)
        self.NoBikes.configure(background="#d9d9d9")
        self.Bikes.lift(self.NoBikes)

        self.Vehicles = ttk.Label(self.ObjectsFrame)
        self.Vehicles.place(relx=0.73, rely=0.05, height=125, width=125)
        self.Vehicles.configure(background="#d9d9d9")
        self.Vehicles.configure(foreground="#000000")
        self.Vehicles.configure(relief=FLAT)
        self._img4 = PhotoImage(file=os.path.join(FOLDER_PATH, "car.gif"))
        self.Vehicles.configure(image=self._img4)

        self.NoVehicles = ttk.Label(self.ObjectsFrame)
        self.NoVehicles.place(relx=0.73, rely=0.05, height=125, width=125)
        self.NoVehicles.configure(background="#d9d9d9")
        self.Vehicles.lift(self.NoVehicles)
        
        self.SignsFrame = LabelFrame(top)
        self.SignsFrame.place(relx=0.01, rely=0.46, relheight=0.25, relwidth=0.98)
        self.SignsFrame.configure(relief=GROOVE)
        self.SignsFrame.configure(foreground="black")
        self.SignsFrame.configure(text='''Signs''')
        self.SignsFrame.configure(background="#d9d9d9")
        self.SignsFrame.configure(width=460)

        self.StopSign = ttk.Label(self.SignsFrame)
        self.StopSign.place(relx=0.27, rely=0.05, height=125, width=125)
        self.StopSign.configure(background="#d9d9d9")
        self.StopSign.configure(foreground="#000000")
        self.StopSign.configure(relief=FLAT)
        self.StopSign.configure(text='''Tlabel''')
        self._img5 = PhotoImage(file=os.path.join(FOLDER_PATH, "sign.gif"))
        self.StopSign.configure(image=self._img5)

        self.NoStopSign = ttk.Label(self.SignsFrame)
        self.NoStopSign.place(relx=0.27, rely=0.05, height=125, width=125)
        self.NoStopSign.configure(background="#d9d9d9")

        self.TrafficLights = ttk.Label(self.SignsFrame)
        self.TrafficLights.place(relx=0.58, rely=0.05, height=125, width=125)
        self.TrafficLights.configure(background="#d9d9d9")
        self.TrafficLights.configure(foreground="#000000")
        self.TrafficLights.configure(relief=FLAT)
        self.TrafficLights.configure(text='''Tlabel''')
        self._img6 = PhotoImage(file=os.path.join(FOLDER_PATH, "light.gif"))
        self.TrafficLights.configure(image=self._img6)

        self.NoTrafficLights = ttk.Label(self.SignsFrame)
        self.NoTrafficLights.place(relx=0.58, rely=0.05, height=125, width=125)
        self.NoTrafficLights.configure(background="#d9d9d9")

        self.LaneFrame = LabelFrame(top)
        self.LaneFrame.place(relx=0.01, rely=0.73, relheight=0.25, relwidth=0.98)
        self.LaneFrame.configure(relief=GROOVE)
        self.LaneFrame.configure(foreground="black")
        self.LaneFrame.configure(text='''Lane''')
        self.LaneFrame.configure(background="#d9d9d9")
        self.LaneFrame.configure(width=460)

        #self.var = IntVar()
        #self.Test = ttk.Checkbutton(self.LaneFrame, text="button", variable=self.var, command=self.FlipStateTest)
        #self.Test.place(relx=0.58, rely=0.05)

    
    def show_label(self, widget1, widget2):
        widget1.lift(widget2)


    def hide_label(self, widget1, widget2):
        widget1.lower(widget2)

    #def FlipStateTest(self):
        #self.test = self.var.get()
            
        #if self.test == 0:
            #self.show_label(self.Pedestrians, self.NoPedestrians)
        #elif self.test == 1:
            #self.hide_label(self.Pedestrians, self.NoPedestrians)

    def updateState(self, threats):
        if threats['PEDESTRIAN']:
            self.show_label(self.Pedestrians, self.NoPedestrians)
        else:
            self.hide_label(self.Pedestrians, self.NoPedestrians)

        if threats['BIKES']:
            self.show_label(self.Bikes, self.NoBikes)
        else:
            self.hide_label(self.Bikes, self.NoBikes)

        if threats['VEHICLES']:
            self.show_label(self.Vehicles, self.NoVehicles)
        else:
            self.hide_label(self.Vehicles, self.NoVehicles)

        if threats['STOP_SIGN']:
            self.show_label(self.StopSign, self.NoStopSign)
        else:
            self.hide_label(self.StopSign, self.NoStopSign)

        if threats['TRAFFIC_LIGHT']:
            self.show_label(self.TrafficLights, self.NoTrafficLights)
        else:
            self.hide_label(self.TrafficLights, self.NoTrafficLights)