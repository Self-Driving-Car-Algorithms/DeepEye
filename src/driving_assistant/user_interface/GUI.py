#! /usr/bin/env python
# GUI module generated by PAGE version 4.9

# libraries and dependencies
# ---------------------------------------------------------------------------- #
import sys, os, threading, time, cv2, keyboard
import pandas as pd

import driving_assistant.user_interface.gui_utils as gui_utils
from driving_assistant.DrivingAssistant import *
from winsound import *

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1
# ---------------------------------------------------------------------------- #


# Utility Functions
# ---------------------------------------------------------------------------- #
FOLDER_PATH = os.path.join(os.getcwd(), 'driving_assistant', 'user_interface')

def start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    gui_utils.set_Tk_var()
    top = Window(root)
    gui_utils.init(root, top)
    root.mainloop()

w = None
def create_gui(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    gui_utils.set_Tk_var()
    top = Window (w)
    gui_utils.init(w, top, *args, **kwargs)       
    return (w, top)

def destroy_gui():
    global w
    w.destroy()
    w = None
    
# ---------------------------------------------------------------------------- #

class Window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#0A121C'  
        _fgcolor = '#ffffff'
        _lbcolor = '#A3EFF2'  
        _abcolor = '#303740'
        _compcolor = '#000000' 
        _ana1color = '#000000'  
        _ana2color = '#000000' 
        font18 = "-family {Calibri Light} -size 22 -weight bold -slant"  \
            " roman -underline 0 -overstrike 0"
        font21 = "-family Helvetica -size 32 -weight bold -slant italic "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")

        top.geometry("952x660")
        top.title("DeepEye")
        top.configure(background=_bgcolor)

        root.option_add('*TCombobox*Listbox*selectBackground', _bgcolor) # change highlight color
        root.option_add("*TCombobox*Listbox*Background", _abcolor)
        root.option_add("*TCombobox*Listbox*Foreground", _fgcolor)
        root.option_add("*TCombobox*Listbox*fieldForeground", _fgcolor)
        root.option_add("*TCombobox*Listbox*highlightBackground", _abcolor)
        root.option_add("*TCombobox*Listbox*fieldBackground", _abcolor)
        root.option_add("*TCombobox*Listbox*selectForeground", _bgcolor)

        self.style.map('TCombobox', fieldbackground=[('readonly', _abcolor)])
        self.style.map('TCombobox', selectbackground=[('readonly', _abcolor)])
        self.style.map('TCombobox', selectforeground=[('readonly', _fgcolor)])
        self.style.map('TCombobox', fieldforeground=[('readonly', _fgcolor)])
        self.style.map('TCombobox', highlightbackground=[('readonly', _abcolor)])

        self.logoImg = PhotoImage(file=os.path.join(FOLDER_PATH, 'logo.gif'))
        self.pedestrianImg = PhotoImage(file=os.path.join(FOLDER_PATH, "pedestrian.gif"))
        self.collisionImg = PhotoImage(file=os.path.join(FOLDER_PATH, "collision.gif"))
        self.bikeImg = PhotoImage(file=os.path.join(FOLDER_PATH, "bike.gif"))
        self.vehicleImg = PhotoImage(file=os.path.join(FOLDER_PATH, "car.gif"))
        self.stopSignImg = PhotoImage(file=os.path.join(FOLDER_PATH, "stop.gif"))
        self.lightImg = PhotoImage(file=os.path.join(FOLDER_PATH, "light.gif"))
        self.noLaneImg = PhotoImage(file=os.path.join(FOLDER_PATH, "noLane.gif"))
        self.laneGreenImg = PhotoImage(file=os.path.join(FOLDER_PATH, "laneGreen.gif"))
        self.leftLaneYellowImg = PhotoImage(file=os.path.join(FOLDER_PATH, "leftLaneYellow.gif"))
        self.leftLaneRedImg = PhotoImage(file=os.path.join(FOLDER_PATH, "leftLaneRed.gif"))
        self.rightLaneYellowImg = PhotoImage(file=os.path.join(FOLDER_PATH, "rightLaneYellow.gif"))
        self.rightLaneRedImg = PhotoImage(file=os.path.join(FOLDER_PATH, "rightLaneRed.gif"))
 
        self.Logo = ttk.Label(top)
        self.Logo.place(relx=0.03, rely=0.02, height=110, width=900)
        self.Logo.configure(width=106)
        self.Logo.configure(image=self.logoImg)

        self.WarningInterfaceFrame = ttk.Frame(top)
        self.WarningInterfaceFrame.place(relx=0.02, rely=0.2, relheight=0.78, relwidth=0.96)

        self.ObjectsFrame = LabelFrame(self.WarningInterfaceFrame)
        self.ObjectsFrame.place(relx=0.01, rely=0.02, relheight=0.32, relwidth=0.98)
        self.ObjectsFrame.configure(relief=GROOVE)
        self.ObjectsFrame.configure(background=_bgcolor)
        self.ObjectsFrame.configure(foreground=_lbcolor)
        self.ObjectsFrame.configure(text='''Objects''')

        self.Pedestrians = ttk.Label(self.ObjectsFrame)
        self.Pedestrians.place(relx=0.11, rely=0.05, height=130, width=130)
        self.Pedestrians.configure(image=self.pedestrianImg)

        self.HidePedestrians = ttk.Label(self.ObjectsFrame)
        self.HidePedestrians.place(relx=0.11, rely=0.05, height=130, width=130)
        self.HidePedestrians.configure(background=_bgcolor)
        self.Pedestrians.lift(self.HidePedestrians)

        self.Collision = ttk.Label(self.ObjectsFrame)
        self.Collision.place(relx=0.43, rely=0.05, height=130, width=130)
        self.Collision.configure(image=self.collisionImg)

        self.Bikes = ttk.Label(self.ObjectsFrame)
        self.Bikes.place(relx=0.43, rely=0.05, height=130, width=130)
        self.Bikes.configure(image=self.bikeImg)

        self.HideBikes = ttk.Label(self.ObjectsFrame)
        self.HideBikes.place(relx=0.43, rely=0.05, height=130, width=130)
        self.HideBikes.configure(background=_bgcolor)
        self.Bikes.lift(self.HideBikes)

        self.Vehicles = ttk.Label(self.ObjectsFrame)
        self.Vehicles.place(relx=0.73, rely=0.05, height=130, width=130)
        self.Vehicles.configure(image=self.vehicleImg)

        self.HideVehicles = ttk.Label(self.ObjectsFrame)
        self.HideVehicles.place(relx=0.73, rely=0.05, height=130, width=130)
        self.HideVehicles.configure(background=_bgcolor)
        self.Vehicles.lift(self.HideVehicles)
        
        self.SignsFrame = LabelFrame(self.WarningInterfaceFrame)
        self.SignsFrame.place(relx=0.01, rely=0.34, relheight=0.32, relwidth=0.98)
        self.SignsFrame.configure(relief=GROOVE)
        self.SignsFrame.configure(background=_bgcolor)
        self.SignsFrame.configure(foreground=_lbcolor)
        self.SignsFrame.configure(text='''Signs''')

        self.StopSign = ttk.Label(self.SignsFrame)
        self.StopSign.place(relx=0.27, rely=0.05, height=135, width=130)
        self.StopSign.configure(image=self.stopSignImg)

        self.HideStopSign = ttk.Label(self.SignsFrame)
        self.HideStopSign.place(relx=0.27, rely=0.05, height=135, width=130)
        self.HideStopSign.configure(background=_bgcolor)
        self.StopSign.lift(self.HideStopSign)

        self.TrafficLights = ttk.Label(self.SignsFrame)
        self.TrafficLights.place(relx=0.58, rely=0.05, height=130, width=130)
        self.TrafficLights.configure(image=self.lightImg)

        self.HideTrafficLights = ttk.Label(self.SignsFrame)
        self.HideTrafficLights.place(relx=0.58, rely=0.05, height=130, width=130)
        self.HideTrafficLights.configure(background=_bgcolor)
        self.TrafficLights.lift(self.HideTrafficLights)

        self.LaneFrame = LabelFrame(self.WarningInterfaceFrame)
        self.LaneFrame.place(relx=0.01, rely=0.66, relheight=0.32, relwidth=0.98)
        self.LaneFrame.configure(relief=GROOVE)
        self.LaneFrame.configure(background=_bgcolor)
        self.LaneFrame.configure(foreground=_lbcolor)
        self.LaneFrame.configure(text='''Lane''')

        self.NoLaneDetected = ttk.Label(self.LaneFrame)
        self.NoLaneDetected.place(relx=0.43, rely=0.05, height=130, width=130)
        self.NoLaneDetected.configure(image=self.noLaneImg)

        self.LaneCentered = ttk.Label(self.LaneFrame)
        self.LaneCentered.place(relx=0.43, rely=0.05, height=130, width=130)
        self.LaneCentered.configure(image=self.laneGreenImg)

        self.HideLaneCentered = ttk.Label(self.LaneFrame)
        self.HideLaneCentered.place(relx=0.43, rely=0.05, height=130, width=130)
        self.HideLaneCentered.configure(background=_bgcolor)

        self.LaneOffLeft = ttk.Label(self.LaneFrame)
        self.LaneOffLeft.place(relx=0.27, rely=0.05, height=130, width=130)
        self.LaneOffLeft.configure(image=self.leftLaneYellowImg)

        self.HideLaneOffLeft = ttk.Label(self.LaneFrame)
        self.HideLaneOffLeft.place(relx=0.27, rely=0.05, height=130, width=130)
        self.HideLaneOffLeft.configure(background=_bgcolor)

        self.LaneOffLeftBad = ttk.Label(self.LaneFrame)
        self.LaneOffLeftBad.place(relx=0.11, rely=0.05, height=130, width=130)
        self.LaneOffLeftBad.configure(image=self.leftLaneRedImg)

        self.HideLaneOffLeftBad = ttk.Label(self.LaneFrame)
        self.HideLaneOffLeftBad.place(relx=0.11, rely=0.05, height=130, width=130)
        self.HideLaneOffLeftBad.configure(background=_bgcolor)

        self.LaneOffRight = ttk.Label(self.LaneFrame)
        self.LaneOffRight.place(relx=0.59, rely=0.05, height=130, width=130)
        self.LaneOffRight.configure(image=self.rightLaneYellowImg)

        self.HideLaneOffRight = ttk.Label(self.LaneFrame)
        self.HideLaneOffRight.place(relx=0.59, rely=0.05, height=130, width=130)
        self.HideLaneOffRight.configure(background=_bgcolor)

        self.LaneOffRightBad = ttk.Label(self.LaneFrame)
        self.LaneOffRightBad.place(relx=0.75, rely=0.05, height=130, width=130)
        self.LaneOffRightBad.configure(image=self.rightLaneRedImg)

        self.HideLaneOffRightBad = ttk.Label(self.LaneFrame)
        self.HideLaneOffRightBad.place(relx=0.75, rely=0.05, height=130, width=130)
        self.HideLaneOffRightBad.configure(background=_bgcolor)

        self.setupFrame = Frame(top, borderwidth = 0, highlightthickness = 0)
        self.setupFrame.place(relx=0.02, rely=0.2, relheight=0.78, relwidth=0.96)
        self.setupFrame.configure(relief=GROOVE)
        self.setupFrame.configure(background=_bgcolor)
        self.setupFrame.configure(highlightbackground=_bgcolor)

        self.OutputFrame = LabelFrame(self.setupFrame)
        self.OutputFrame.place(relx=0.03, rely=0.04, relheight=0.34, relwidth=.94)
        self.OutputFrame.configure(relief=GROOVE)
        self.OutputFrame.configure(background=_bgcolor)
        self.OutputFrame.configure(foreground=_lbcolor)
        self.OutputFrame.configure(highlightbackground=_bgcolor)
        self.OutputFrame.configure(text='''Setup Console''')

        self.CommandLineOutput = ScrolledListBox(self.OutputFrame, borderwidth = 0, highlightthickness = 0)
        self.CommandLineOutput.place(relx=0.01, rely=0.02, relheight=0.93, relwidth=0.98)
        self.CommandLineOutput.configure(background=_bgcolor)
        self.CommandLineOutput.configure(disabledforeground=_fgcolor)
        self.CommandLineOutput.configure(font="TkFixedFont")
        self.CommandLineOutput.configure(foreground=_fgcolor)
        self.CommandLineOutput.configure(highlightbackground=_bgcolor)
        self.CommandLineOutput.configure(highlightcolor=_bgcolor)
        self.CommandLineOutput.configure(selectbackground=_fgcolor)
        self.CommandLineOutput.configure(selectforeground=_bgcolor)
        self.CommandLineOutput.configure(listvariable=gui_utils.CommandLineOutput)
        self.CommandLineOutput.see("end")

        self.WindowManagerFrame = LabelFrame(self.setupFrame)
        self.WindowManagerFrame.place(relx=0.03, rely=0.425, relheight=0.51, relwidth=0.25)
        self.WindowManagerFrame.configure(relief=GROOVE)
        self.WindowManagerFrame.configure(background=_bgcolor)
        self.WindowManagerFrame.configure(foreground=_lbcolor)
        self.WindowManagerFrame.configure(highlightbackground=_bgcolor)
        self.WindowManagerFrame.configure(text='''Window Manager''')

        self.MonitorIdTitle = ttk.Label(self.WindowManagerFrame)
        self.MonitorIdTitle.place(relx=0.1, rely=0.06, relheight=0.07, relwidth=0.5)
        self.MonitorIdTitle.configure(foreground=_fgcolor)
        self.MonitorIdTitle.configure(text='''Monitor ID''')

        self.MonitorId = ttk.Combobox(self.WindowManagerFrame)
        self.MonitorId.place(relx=0.42, rely=0.06, relheight=0.08, relwidth=0.5)
        self.MonitorId.configure(textvariable=gui_utils.MonitorIDBox)
        self.MonitorId.configure(takefocus="")
        self.value_list = ['0','1', '2']
        self.MonitorId.configure(values=self.value_list)
        self.MonitorId.insert(0,'1')
        self.MonitorId['state'] = 'readonly'

        self.CustomWindowCheck = Checkbutton(self.WindowManagerFrame, command=self.FlipState, fg=_fgcolor, bg=_bgcolor)
        self.CustomWindowCheck.place(relx=0.21, rely=0.21, relheight=0.09, relwidth=0.7)
        self.CustomWindowCheck.configure(activebackground=_bgcolor)
        self.CustomWindowCheck.configure(disabledforeground=_fgcolor)
        self.CustomWindowCheck.configure(activeforeground=_fgcolor)
        self.CustomWindowCheck.configure(highlightcolor=_bgcolor)
        self.CustomWindowCheck.configure(selectcolor=_bgcolor)
        self.CustomWindowCheck.configure(justify=LEFT)
        self.CustomWindowCheck.configure(text='''Set Custom Window Size?''')
        self.CustomWindowCheck.configure(variable=gui_utils.WindowCheck)
        
        self.WidthTitle = ttk.Label(self.WindowManagerFrame)
        self.WidthTitle.place(relx=0.08, rely=0.37, relheight=0.07, relwidth=0.5)
        self.WidthTitle.configure(foreground=_fgcolor)
        self.WidthTitle.configure(text='''         Width''')

        self.WindowWidth = Spinbox(self.WindowManagerFrame, from_=1.0, to=5000.0)
        self.WindowWidth.place(relx=0.42, rely=0.37, relheight=0.07, relwidth=0.5)
        self.WindowWidth.configure(bg=_abcolor)
        self.WindowWidth.configure(fg=_fgcolor)
        self.WindowWidth.configure(activebackground=_abcolor)
        self.WindowWidth.configure(disabledbackground=_bgcolor)
        self.WindowWidth.configure(disabledforeground=_bgcolor)
        self.WindowWidth.configure(buttonbackground=_bgcolor)
        self.WindowWidth.configure(highlightcolor=_bgcolor)
        self.WindowWidth.configure(insertbackground=_fgcolor)
        self.WindowWidth.configure(from_="1.0")
        self.WindowWidth.configure(textvariable=gui_utils.WindowWidthBox)
        self.WindowWidth.configure(to="5000.0")
        self.WindowWidth.insert(888,'888')
        self.WindowWidth['state'] = DISABLED

        self.HeightTitle = ttk.Label(self.WindowManagerFrame)
        self.HeightTitle.place(relx=0.08, rely=0.53, relheight=0.07, relwidth=0.5)
        self.HeightTitle.configure(foreground=_fgcolor)
        self.HeightTitle.configure(text='''        Height''')

        self.WindowHeight = Spinbox(self.WindowManagerFrame, from_=1.0, to=5000.0)
        self.WindowHeight.place(relx=0.42, rely=0.53, relheight=0.07, relwidth=0.5)
        self.WindowHeight.configure(bg=_abcolor)
        self.WindowHeight.configure(fg=_fgcolor)
        self.WindowHeight.configure(activebackground=_abcolor)
        self.WindowHeight.configure(disabledbackground=_bgcolor)
        self.WindowHeight.configure(disabledforeground=_bgcolor)
        self.WindowHeight.configure(buttonbackground=_bgcolor)
        self.WindowHeight.configure(highlightcolor=_bgcolor)
        self.WindowHeight.configure(insertbackground=_fgcolor)
        self.WindowHeight.configure(from_="1.0")
        self.WindowHeight.configure(textvariable=gui_utils.WindowHeightBox)
        self.WindowHeight.configure(to="5000.0")
        self.WindowHeight.insert(480,'480')
        self.WindowHeight['state'] = DISABLED

        self.TopTitle = ttk.Label(self.WindowManagerFrame)
        self.TopTitle.place(relx=0.08, rely=0.69, relheight=0.07, relwidth=0.5)
        self.TopTitle.configure(foreground=_fgcolor)
        self.TopTitle.configure(text='''  Top Offest''')

        self.TopOffset = Spinbox(self.WindowManagerFrame, from_=0.0, to=5000.0)
        self.TopOffset.place(relx=0.42, rely=0.69, relheight=0.07, relwidth=0.5)
        self.TopOffset.configure(bg=_abcolor)
        self.TopOffset.configure(fg=_fgcolor)
        self.TopOffset.configure(activebackground=_abcolor)
        self.TopOffset.configure(disabledbackground=_bgcolor)
        self.TopOffset.configure(disabledforeground=_bgcolor)
        self.TopOffset.configure(buttonbackground=_bgcolor)
        self.TopOffset.configure(highlightcolor=_bgcolor)
        self.TopOffset.configure(insertbackground=_fgcolor)
        self.TopOffset.configure(from_="1.0")
        self.TopOffset.configure(textvariable=gui_utils.TopOffsetBox)
        self.TopOffset.configure(to="5000.0")
        self.TopOffset.insert(0,'0')
        self.TopOffset['state'] = DISABLED

        self.LeftTitle = ttk.Label(self.WindowManagerFrame)
        self.LeftTitle.place(relx=.08, rely=0.84, relheight=0.07, relwidth=0.5)
        self.LeftTitle.configure(foreground=_fgcolor)
        self.LeftTitle.configure(text='''   Left Offset''')

        self.LeftOffset = Spinbox(self.WindowManagerFrame, from_=0.0, to=5000.0)
        self.LeftOffset.place(relx=0.42, rely=0.84, relheight=0.07, relwidth=0.5)
        self.LeftOffset.configure(bg=_abcolor)
        self.LeftOffset.configure(fg=_fgcolor)
        self.LeftOffset.configure(activebackground=_abcolor)
        self.LeftOffset.configure(disabledbackground=_bgcolor)
        self.LeftOffset.configure(disabledforeground=_bgcolor)
        self.LeftOffset.configure(buttonbackground=_bgcolor)
        self.LeftOffset.configure(highlightcolor=_bgcolor)
        self.LeftOffset.configure(insertbackground=_fgcolor)
        self.LeftOffset.configure(from_="1.0")
        self.LeftOffset.configure(textvariable=gui_utils.LeftOffsetBox)
        self.LeftOffset.configure(to="5000.0")
        self.LeftOffset.insert(0,'0')
        self.LeftOffset['state'] = DISABLED

        self.CustomizationFrame = LabelFrame(self.setupFrame)
        self.CustomizationFrame.place(relx=0.31, rely=0.425, relheight=0.32, relwidth=0.31)
        self.CustomizationFrame.configure(background=_bgcolor)
        self.CustomizationFrame.configure(foreground=_lbcolor)
        self.CustomizationFrame.configure(text='''Customization''')

        self.ObjectDetectionCheck = Checkbutton(self.CustomizationFrame, fg=_fgcolor, bg=_bgcolor)
        self.ObjectDetectionCheck.place(relx=0.08, rely=0.01, relheight=0.15, relwidth=0.85)
        self.ObjectDetectionCheck.configure(activebackground=_bgcolor)
        self.ObjectDetectionCheck.configure(disabledforeground=_fgcolor)
        self.ObjectDetectionCheck.configure(activeforeground=_fgcolor)
        self.ObjectDetectionCheck.configure(highlightcolor=_bgcolor)
        self.ObjectDetectionCheck.configure(selectcolor=_bgcolor)
        self.ObjectDetectionCheck.configure(justify=LEFT)
        self.ObjectDetectionCheck.configure(text='''Enable Object Detection?                        ''')
        self.ObjectDetectionCheck.configure(variable=gui_utils.ObjectDetection)

        self.LaneDetectionCheck = Checkbutton(self.CustomizationFrame, fg=_fgcolor, bg=_bgcolor)
        self.LaneDetectionCheck.place(relx=0.08, rely=0.21, relheight=0.15, relwidth=0.85)
        self.LaneDetectionCheck.configure(activebackground=_bgcolor)
        self.LaneDetectionCheck.configure(disabledforeground=_fgcolor)
        self.LaneDetectionCheck.configure(activeforeground=_fgcolor)
        self.LaneDetectionCheck.configure(highlightcolor=_bgcolor)
        self.LaneDetectionCheck.configure(selectcolor=_bgcolor)
        self.LaneDetectionCheck.configure(justify=LEFT)
        self.LaneDetectionCheck.configure(text='''Enable Lane Detection?                           ''')
        self.LaneDetectionCheck.configure(variable=gui_utils.LaneDetection)

        self.EnableObjectVisual = Checkbutton(self.CustomizationFrame, fg=_fgcolor, bg=_bgcolor)
        self.EnableObjectVisual.place(relx=0.08, rely=0.41, relheight=0.15, relwidth=0.85)
        self.EnableObjectVisual.configure(activebackground=_bgcolor)
        self.EnableObjectVisual.configure(disabledforeground=_fgcolor)
        self.EnableObjectVisual.configure(activeforeground=_fgcolor)
        self.EnableObjectVisual.configure(highlightcolor=_bgcolor)
        self.EnableObjectVisual.configure(selectcolor=_bgcolor)
        self.EnableObjectVisual.configure(justify=LEFT)
        self.EnableObjectVisual.configure(text='''Enable Object Detection Visualization? ''')
        self.EnableObjectVisual.configure(variable=gui_utils.ObjectVisual)

        self.EnableLaneVisual = Checkbutton(self.CustomizationFrame, fg=_fgcolor, bg=_bgcolor)
        self.EnableLaneVisual.place(relx=0.08, rely=0.61, relheight=0.15, relwidth=0.85)
        self.EnableLaneVisual.configure(activebackground=_bgcolor)
        self.EnableLaneVisual.configure(disabledforeground=_fgcolor)
        self.EnableLaneVisual.configure(activeforeground=_fgcolor)
        self.EnableLaneVisual.configure(highlightcolor=_bgcolor)
        self.EnableLaneVisual.configure(selectcolor=_bgcolor)
        self.EnableLaneVisual.configure(justify=LEFT)
        self.EnableLaneVisual.configure(text='''Enable Lane Visualization?                      ''')
        self.EnableLaneVisual.configure(variable=gui_utils.LaneVisual)


        self.EnableDiagnosticMode = Checkbutton(self.CustomizationFrame, fg=_fgcolor, bg=_bgcolor)
        self.EnableDiagnosticMode.place(relx=0.07, rely=0.81, relheight=0.15, relwidth=0.85)
        self.EnableDiagnosticMode.configure(activebackground=_bgcolor)
        self.EnableDiagnosticMode.configure(disabledforeground=_fgcolor)
        self.EnableDiagnosticMode.configure(activeforeground=_fgcolor)
        self.EnableDiagnosticMode.configure(highlightcolor=_bgcolor)
        self.EnableDiagnosticMode.configure(selectcolor=_bgcolor)
        self.EnableDiagnosticMode.configure(justify=LEFT)
        self.EnableDiagnosticMode.configure(text='''Enable Diagnostic Mode?                      ''')
        self.EnableDiagnosticMode.configure(variable=gui_utils.DiagnosticMode)

        self.DatasetFrame = LabelFrame(self.setupFrame)
        self.DatasetFrame.place(relx=0.65, rely=0.425, relheight=0.32, relwidth=0.32)
        self.DatasetFrame.configure(background=_bgcolor)
        self.DatasetFrame.configure(foreground=_lbcolor)
        self.DatasetFrame.configure(text='''CNN''')

        self.ClassifierTitle = ttk.Label(self.DatasetFrame)
        self.ClassifierTitle.place(relx=0.05, rely=0.1, relheight=0.15, relwidth=0.3)
        self.ClassifierTitle.configure(foreground=_fgcolor)
        self.ClassifierTitle.configure(text='''  Identifier''')

        self.ClassifierCode = ttk.Combobox(self.DatasetFrame)
        self.ClassifierCode.place(relx=0.3, rely=0.1, relheight=0.15, relwidth=0.58)
        self.value_list = ['Nas','Inception-Resnet','Resnet101',]
        self.ClassifierCode.configure(values=self.value_list)
        self.ClassifierCode.configure(textvariable=gui_utils.ClassiferBox)
        self.ClassifierCode.configure(takefocus="")
        self.ClassifierCode.insert(0,'Resnet101')
        self.ClassifierCode['state'] = 'readonly'

        self.DatasetTitle = ttk.Label(self.DatasetFrame)
        self.DatasetTitle.place(relx=0.05, rely=0.42, relheight=0.15, relwidth=0.3)
        self.DatasetTitle.configure(foreground=_fgcolor)
        self.DatasetTitle.configure(text='''    Dataset''')

        self.DatasetCode = ttk.Combobox(self.DatasetFrame)
        self.DatasetCode.place(relx=0.3, rely=0.42, relheight=0.15, relwidth=0.58)
        self.value_list = ['Coco','Kitti',]
        self.DatasetCode.configure(values=self.value_list)
        self.DatasetCode.configure(textvariable=gui_utils.DatasetBox)
        self.DatasetCode.configure(takefocus="")
        self.DatasetCode.insert(0,'Coco')
        self.DatasetCode['state'] = 'readonly'

        self.ThresholdTitle = ttk.Label(self.DatasetFrame)
        self.ThresholdTitle.place(relx=0.05, rely=0.73, relheight=0.15, relwidth=0.3)
        self.ThresholdTitle.configure(foreground=_fgcolor)
        self.ThresholdTitle.configure(text='''Threshold''')
        
        self.value_list.clear()
        for i in range(101):
            self.value_list.append(str(i)+'%')

        self.Threshold = Spinbox(self.DatasetFrame, from_=0.0, to=1.0)
        self.Threshold.place(relx=0.3, rely=0.73, relheight=0.15, relwidth=0.58)
        self.Threshold.configure(bg=_abcolor)
        self.Threshold.configure(fg=_fgcolor)
        self.Threshold.configure(activebackground=_abcolor)
        self.Threshold.configure(disabledbackground=_bgcolor)
        self.Threshold.configure(disabledforeground=_bgcolor)
        self.Threshold.configure(buttonbackground=_bgcolor)
        self.Threshold.configure(highlightcolor=_bgcolor)
        self.Threshold.configure(insertbackground=_fgcolor)
        self.Threshold.configure(readonlybackground=_abcolor) 
        self.Threshold.configure(increment="0.01")
        self.Threshold.configure(textvariable=gui_utils.ThresholdBox)        
        self.Threshold.configure(values=self.value_list)
        self.Threshold.delete(0,"end")
        self.Threshold.insert(0,'85%')
        self.Threshold['state'] = 'readonly'

        self.ButtonFrame = Frame(self.setupFrame, borderwidth=0, highlightthickness = 0)
        self.ButtonFrame.place(relx=0.31, rely=0.77, relheight=0.17, relwidth=0.66)
        self.ButtonFrame.configure(background=_bgcolor)

        self.ExitButton = Button(self.ButtonFrame, command=self.exitProgram, borderwidth = 0, highlightthickness = 0)
        self.ExitButton.place(relx=0.52, rely=0.16, relheight=.8, relwidth=.49)
        self.ExitButton.configure(activebackground=_bgcolor)
        self.ExitButton.configure(activeforeground=_fgcolor)
        self.ExitButton.configure(background="#731A1A")
        self.ExitButton.configure(font=font18)
        self.ExitButton.configure(foreground=_fgcolor)
        self.ExitButton.configure(highlightbackground=_bgcolor)
        self.ExitButton.configure(highlightcolor="black")
        self.ExitButton.configure(pady="0")
        self.ExitButton.configure(text='''Exit''')

        self.RunButton = Button(self.ButtonFrame, command=self.runProgram, borderwidth = 0, highlightthickness = 0)
        self.RunButton.place(relx=0.0, rely=0.16, relheight=.8, relwidth=.47)
        self.RunButton.configure(activebackground=_bgcolor)
        self.RunButton.configure(activeforeground=_fgcolor)
        self.RunButton.configure(background="#60A116")
        self.RunButton.configure(font=font18)
        self.RunButton.configure(foreground=_fgcolor)
        self.RunButton.configure(highlightbackground=_bgcolor)
        self.RunButton.configure(highlightcolor="black")
        self.RunButton.configure(pady="0")
        self.RunButton.configure(text='''Run''')

        self.FramesPerSecond = ttk.Label(top)
        self.FramesPerSecond.place(relx=0.95, rely=0.97)
        self.FramesPerSecond.configure(foreground=_fgcolor)

        sys.stdout = TextRedirector(self.CommandLineOutput)
        print("Welcome to DeepEye Advanced Driver-Assistance Systems.\n")
        print("Configure setup, then press run.")
        print("To exit and return to this menu, hold 'Esc' key.")


    def show_label(self, widget1, widget2):
        widget1.lift(widget2)


    def hide_label(self, widget1, widget2):
        widget1.lower(widget2)


    def updateState(self, threats):
        
        self.FramesPerSecond.configure(text=gui_utils.FrameRateOutput)

        if threats['PEDESTRIAN']:
            self.show_label(self.Pedestrians, self.HidePedestrians)
        else:
            self.hide_label(self.Pedestrians, self.HidePedestrians)

        if threats['BIKES']:
            self.show_label(self.Bikes, self.HideBikes)
        else:
            self.hide_label(self.Bikes, self.HideBikes)

        if threats['VEHICLES']:
            self.show_label(self.Vehicles, self.HideVehicles)
        else:
            self.hide_label(self.Vehicles, self.HideVehicles)

        if threats['STOP_SIGN']:
            self.show_label(self.StopSign, self.HideStopSign)
        else:
            self.hide_label(self.StopSign, self.HideStopSign)

        if threats['TRAFFIC_LIGHT']:
            self.show_label(self.TrafficLights, self.HideTrafficLights)

        else:
            self.hide_label(self.TrafficLights, self.HideTrafficLights)

        if threats['COLLISION']:
            self.hide_label(self.Pedestrians, self.HidePedestrians)
            self.hide_label(self.Bikes, self.HideBikes)
            self.hide_label(self.Vehicles, self.HideVehicles)
            self.show_label(self.Collision, self.HideBikes)
            threading.Thread(target=self.playBeep).start()
        else:
            self.hide_label(self.Collision, self.HideBikes)

        #if Lane Detection is enabled
        if gui_utils.LaneDetection.get() == True:
            if threats['UNKNOWN']:
                self.show_label(self.NoLaneDetected, self.HideLaneCentered)
            else:
                self.hide_label(self.NoLaneDetected, self.HideLaneCentered)

            if threats['CENTER']:
                self.show_label(self.LaneCentered, self.HideLaneCentered)
            else:
                self.hide_label(self.LaneCentered, self.HideLaneCentered)

            if threats['LEFT']:
                self.show_label(self.LaneOffLeft, self.HideLaneOffLeft)
            else:
                self.hide_label(self.LaneOffLeft, self.HideLaneOffLeft)

            if threats['FAR_LEFT']:
                self.show_label(self.LaneOffLeftBad, self.HideLaneOffLeftBad)
            else:
                self.hide_label(self.LaneOffLeftBad, self.HideLaneOffLeftBad)
            
            if threats['RIGHT']:
                self.show_label(self.LaneOffRight, self.HideLaneOffRight)
            else:
                self.hide_label(self.LaneOffRight, self.HideLaneOffRight)

            if threats['FAR_RIGHT']:
                self.show_label(self.LaneOffRightBad, self.HideLaneOffRightBad)
            else:
                self.hide_label(self.LaneOffRightBad, self.HideLaneOffRightBad)
        else:
            self.show_label(self.NoLaneDetected, self.HideLaneCentered)

    def playBeep(self):
        PlaySound(os.path.join(FOLDER_PATH, "beep.wav"), SND_FILENAME)

    def FlipState(self):
        self.test = self.windowCheck.get()
            
        if self.test == 0:
            self.WindowWidth['state'] = DISABLED
            self.WindowHeight['state'] = DISABLED
            self.TopOffset['state'] = DISABLED
            self.LeftOffset['state'] = DISABLED
        elif self.test == 1:
            self.WindowWidth['state'] = NORMAL
            self.WindowHeight['state'] = NORMAL
            self.TopOffset['state'] = NORMAL
            self.LeftOffset['state'] = NORMAL


    def set_adas_prams(self):
        convertedThreshold = int(self.Threshold.get()[:-1])/100
        convertedWindowHeight = 0
        convertedWindowWidth = 0
        convertedTopOffset = 0
        convertedLeftOffset = 0
        
        if gui_utils.WindowCheck.get() == 1:
            convertedWindowHeight = int(self.WindowHeight.get())
            convertedWindowWidth = int(self.WindowWidth.get())
            convertedTopOffset = int(self.TopOffset.get())
            convertedLeftOffset = int(self.LeftOffset.get())
            
        convertedClassifier = ''
        if self.ClassifierCode.get() == 'Resnet101':
            convertedClassifier = 'faster_rcnn_resnet101_coco_2017_11_08'
        elif self.ClassifierCode.get() == 'Nas':
            convertedClassifier = 'faster_rcnn_nas_coco_2017_11_08'
        elif self.ClassifierCode.get() == 'Inception-Resnet':
            convertedClassifier = 'mask_rcnn_inception_v2_coco_coco_2017_11_08'
            
        convertedDataset = ''
        if self.DatasetCode.get() == 'Coco':
            convertedDataset = 'mscoco'
        elif self.DatasetCode.get() == 'Kitti':
            convertedDataset = 'kitti'

        return convertedClassifier, \
            convertedDataset, \
            convertedThreshold, \
            gui_utils.ObjectDetection.get(), \
            gui_utils.ObjectVisual.get(), \
            gui_utils.LaneDetection.get(), \
            gui_utils.LaneVisual.get(), \
            gui_utils.DiagnosticMode.get(), \
            int(self.MonitorId.get()), \
            convertedTopOffset, \
            convertedLeftOffset, \
            convertedWindowWidth, \
            convertedWindowHeight


    def mainLoop(self): 
        classifier, dataset, threshold, \
        obj_flag, obj_vis, lane_flag, lane_vis, diagnostic, \
        mid, top, left, width, height = self.set_adas_prams()

        driving_assistant = DrivingAssistant(
            classifier_codename = classifier,
            dataset_codename = dataset,
            classifier_threshold = threshold,
            object_detection = obj_flag,
            object_visualization = obj_vis,
            lane_detection = lane_flag,
            lane_visualization = lane_vis,
            diagnostic_mode = diagnostic,
            monitor_id = mid,
            window_top_offset = top,
            window_left_offset = left,
            window_width = width,
            window_height = height)

        driving_assistant.object_detector.setup()
        self.show_label(self.WarningInterfaceFrame, self.setupFrame)

        while(True):
            # Register current time to be used for calculating frame rate
            timer = time.time()

            driving_assistant.run()
            self.updateState(driving_assistant.threats)

             # Calculating fps based on the previous registered timer
            frame_rate = 10 / (time.time() - timer)
            gui_utils.FrameRateOutput = 'FPS: {0}'.format(int(frame_rate))

            # Press ESC key to exit.
            if cv2.waitKey(25) & keyboard.is_pressed('escape'):
                cv2.destroyAllWindows()
                self.FramesPerSecond.configure(text="")
                break
        
        self.show_label(self.setupFrame, self.WarningInterfaceFrame)

        if driving_assistant.diagnostic_mode:
            timestamp = time.strftime("test/logs/[%Y-%m-%d_%H-%M]--DeepEye.csv")
            print("Saveing logs to: test/logs/", timestamp)
            driving_assistant.data_frame.to_csv(timestamp)

        print("Returning to Setup Menu")


    def runProgram(self):
        threading.Thread(target=self.mainLoop).start()
    

    def exitProgram(self):
        cv2.destroyAllWindows()
        root.destroy()

   
class TextRedirector(object):
    def __init__(self, widget):
        self.widget = widget

    def write(self, str):
        self.widget.configure(state="normal")
        self.widget.insert("end", str)
        self.widget.configure(state="disabled")
        self.widget.see("end")

    def flush(self):
        pass


# The following code is added to facilitate the Scrolled widgets.
class AutoScroll(object):
    #Configure the scrollbars for a widget.

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        #Hide and show scrollbar as needed.
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    #Creates a ttk Frame with a given master, and use this new frame to
    #place the scrollbars and the widget.
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped


class ScrolledListBox(AutoScroll, Listbox):
    #A standard Tkinter Text widget with scrollbars that will
    #automatically show/hide as needed.
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
