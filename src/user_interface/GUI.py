#! /usr/bin/env python
# GUI module generated by PAGE version 4.9

# libraries and dependencies
# ---------------------------------------------------------------------------- #
import sys, os

import user_interface.gui_utils as gui_utils
from adsa.DrivingAssistant import *


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1
# ---------------------------------------------------------------------------- #


# Utility Functions
# ---------------------------------------------------------------------------- #
FOLDER_PATH = os.path.join(os.getcwd(), 'user_interface')

def start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    gui_utils.set_Tk_var()
    top = Window(root)
    gui_utils.init(root, top)
    root.mainloop()

w = None
def create_gui(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    gui_utils.set_Tk_var()
    top = Window (w)
    gui_utils.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_gui():
    global w
    w.destroy()
    w = None
# ---------------------------------------------------------------------------- #

class Window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font18 = "-family {Calibri Light} -size 22 -weight bold -slant"  \
            " roman -underline 0 -overstrike 0"
        font21 = "-family David -size 48 -weight bold -slant italic "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("436x489+606+201")
        top.title("DeepEye")
        top.configure(background="#d9d9d9")



        self.DatasetFrame = ttk.Labelframe(top)
        self.DatasetFrame.place(relx=0.05, rely=0.61, relheight=0.34
                , relwidth=0.53)
        self.DatasetFrame.configure(text='''Dataset''')
        self.DatasetFrame.configure(width=230)

        self.ClassifierCode = ttk.Combobox(self.DatasetFrame)
        self.ClassifierCode.place(relx=0.39, rely=0.24, relheight=0.13
                , relwidth=0.49)
        self.value_list = ['Nas','Inception-Resnet','Resnet101',]
        self.ClassifierCode.configure(values=self.value_list)
        self.ClassifierCode.configure(textvariable=gui_utils.ClassiferBox)
        self.ClassifierCode.configure(width=113)
        self.ClassifierCode.configure(takefocus="")
        self.ClassifierCode.insert(0,'Resnet101')

        self.DatasetCode = ttk.Combobox(self.DatasetFrame)
        self.DatasetCode.place(relx=0.39, rely=0.45, relheight=0.13
                , relwidth=0.49)
        self.value_list = ['Coco','Kitti',]
        self.DatasetCode.configure(values=self.value_list)
        self.DatasetCode.configure(textvariable=gui_utils.DatasetBox)
        self.DatasetCode.configure(width=113)
        self.DatasetCode.configure(takefocus="")
        self.DatasetCode.insert(0,'Coco')
        
        self.Threshold = Spinbox(self.DatasetFrame, from_=0.0, to=1.0)
        self.Threshold.place(relx=0.39, rely=0.68, relheight=0.12, relwidth=0.24)

        self.Threshold.configure(activebackground="#f9f9f9")
        self.Threshold.configure(background="white")
        self.Threshold.configure(buttonbackground="#d9d9d9")
        self.Threshold.configure(disabledforeground="#a3a3a3")
        self.Threshold.configure(foreground="black")
        self.Threshold.configure(highlightbackground="black")
        self.Threshold.configure(highlightcolor="black")
        self.Threshold.configure(increment="0.01")
        self.Threshold.configure(insertbackground="black")
        self.Threshold.configure(selectbackground="#c4c4c4")
        self.Threshold.configure(selectforeground="black")
        self.Threshold.configure(textvariable=gui_utils.ThresholdBox)
        self.Threshold.configure(to="1.0")
        self.value_list.clear()
        for i in range(101):
            self.value_list.append(str(i)+'%')        
        self.Threshold.configure(values=self.value_list)
        self.Threshold.configure(width=55)
        self.Threshold.delete(0,"end")
        self.Threshold.insert(0,'85%')

        self.TLabel4 = ttk.Label(self.DatasetFrame)
        self.TLabel4.place(relx=0.09, rely=0.24, height=19, width=61)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(relief=FLAT)
        self.TLabel4.configure(text='''Classifier''')
        self.TLabel4.configure(width=61)

        self.TLabel5 = ttk.Label(self.DatasetFrame)
        self.TLabel5.place(relx=0.13, rely=0.46, height=20, width=50)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(relief=FLAT)
        self.TLabel5.configure(text='''Dataset''')
        self.TLabel5.configure(width=50)

        self.TLabel6 = ttk.Label(self.DatasetFrame)
        self.TLabel6.place(relx=0.07, rely=0.68, height=19, width=57)
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(relief=FLAT)
        self.TLabel6.configure(text='''Threshold''')

        self.InputOutputFrame = ttk.Labelframe(top)
        self.InputOutputFrame.place(relx=0.05, rely=0.27, relheight=0.32
                , relwidth=0.89)
        self.InputOutputFrame.configure(text='''Input/Output''')
        self.InputOutputFrame.configure(width=390)

        self.MonitorSizeFrame = ttk.Frame(self.InputOutputFrame)
        self.MonitorSizeFrame.place(relx=0.46, rely=0.17, relheight=0.74
                , relwidth=0.47)
        self.MonitorSizeFrame.configure(relief=GROOVE)
        self.MonitorSizeFrame.configure(borderwidth="2")
        self.MonitorSizeFrame.configure(relief=GROOVE)
        self.MonitorSizeFrame.configure(width=185)

        self.windowCheck = IntVar()
        self.CustomWindowCheck = Checkbutton(self.MonitorSizeFrame, command=self.FlipState)
        self.CustomWindowCheck.place(relx=0.0, rely=0.02, relheight=0.39
                , relwidth=0.98)
        self.CustomWindowCheck.configure(activebackground="#d9d9d9")
        self.CustomWindowCheck.configure(activeforeground="#000000")
        self.CustomWindowCheck.configure(background="#d9d9d9")
        #self.CustomWindowCheck.configure(command=WindowHeight.configure(state='disabled'))
        self.CustomWindowCheck.configure(disabledforeground="#a3a3a3")
        self.CustomWindowCheck.configure(foreground="#000000")
        self.CustomWindowCheck.configure(highlightbackground="#d9d9d9")
        self.CustomWindowCheck.configure(highlightcolor="black")
        self.CustomWindowCheck.configure(justify=LEFT)
        self.CustomWindowCheck.configure(text='''Set Custom Window Size?''')
        self.CustomWindowCheck.configure(variable=self.windowCheck)

        self.TLabel7 = ttk.Label(self.MonitorSizeFrame)
        self.TLabel7.place(relx=0.05, rely=0.37, height=19, width=43)
        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(relief=FLAT)
        self.TLabel7.configure(text='''Height''')

        self.TLabel8 = ttk.Label(self.MonitorSizeFrame)
        self.TLabel8.place(relx=0.08, rely=0.63, height=19, width=43)
        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(relief=FLAT)
        self.TLabel8.configure(text='''Width''')

        self.WindowHeight = Spinbox(self.MonitorSizeFrame, from_=1.0, to=5000.0)
        self.WindowHeight.place(relx=0.35, rely=0.37, relheight=0.17
                , relwidth=0.51)
        self.WindowHeight.configure(activebackground="#f9f9f9")
        self.WindowHeight.configure(background="white")
        self.WindowHeight.configure(buttonbackground="#d9d9d9")
        self.WindowHeight.configure(disabledbackground="#f0f0f0f0f0f0")
        self.WindowHeight.configure(disabledforeground="#a3a3a3")
        self.WindowHeight.configure(foreground="black")
        self.WindowHeight.configure(from_="1.0")
        self.WindowHeight.configure(highlightbackground="black")
        self.WindowHeight.configure(highlightcolor="black")
        self.WindowHeight.configure(insertbackground="black")
        self.WindowHeight.configure(selectbackground="#c4c4c4")
        self.WindowHeight.configure(selectforeground="black")
        self.WindowHeight.configure(textvariable=gui_utils.WindowHeightBox)
        self.WindowHeight.configure(to="5000.0")
        self.WindowHeight.configure(width=95)
        self.WindowHeight['state'] = DISABLED


        self.WindowWidth = Spinbox(self.MonitorSizeFrame, from_=1.0, to=5000.0)
        self.WindowWidth.place(relx=0.35, rely=0.63, relheight=0.17
                , relwidth=0.51)
        self.WindowWidth.configure(activebackground="#f9f9f9")
        self.WindowWidth.configure(background="white")
        self.WindowWidth.configure(buttonbackground="#d9d9d9")
        self.WindowWidth.configure(disabledforeground="#a3a3a3")
        self.WindowWidth.configure(foreground="black")
        self.WindowWidth.configure(from_="1.0")
        self.WindowWidth.configure(highlightbackground="black")
        self.WindowWidth.configure(highlightcolor="black")
        self.WindowWidth.configure(insertbackground="black")
        self.WindowWidth.configure(selectbackground="#c4c4c4")
        self.WindowWidth.configure(selectforeground="black")
        self.WindowWidth.configure(textvariable=gui_utils.WindowWidthBox)
        self.WindowWidth.configure(to="5000.0")
        self.WindowWidth.configure(width=95)
        self.WindowWidth['state'] = DISABLED

        self.TLabel9 = ttk.Label(self.InputOutputFrame)
        self.TLabel9.place(relx=0.04, rely=0.26, height=19, width=61)
        self.TLabel9.configure(background="#d9d9d9")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(relief=FLAT)
        self.TLabel9.configure(text='''Monitor ID''')
        self.TLabel9.configure(width=61)

        self.MonitorId = ttk.Combobox(self.InputOutputFrame)
        self.MonitorId.place(relx=0.23, rely=0.26, relheight=0.14, relwidth=0.17)
        self.MonitorId.configure(textvariable=gui_utils.MonitorIDBox)
        self.MonitorId.configure(width=63)
        self.MonitorId.configure(takefocus="")
        self.value_list = ['0','1', '2']
        self.MonitorId.configure(values=self.value_list)
        self.MonitorId.insert(0,'1')

        self.TLabel1 = ttk.Label(self.InputOutputFrame)
        self.TLabel1.place(relx=0.04, rely=0.46, height=19, width=63)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Top Offest''')

        self.TLabel2 = ttk.Label(self.InputOutputFrame)
        self.TLabel2.place(relx=0.04, rely=0.68, height=19, width=59)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(text='''Left Offset''')

        self.TopOffset = Spinbox(self.InputOutputFrame, from_=0.0, to=5000.0)
        self.TopOffset.place(relx=0.23, rely=0.47, relheight=0.12, relwidth=0.17)
        self.TopOffset.configure(activebackground="#f9f9f9")
        self.TopOffset.configure(background="white")
        self.TopOffset.configure(buttonbackground="#d9d9d9")
        self.TopOffset.configure(disabledforeground="#a3a3a3")
        self.TopOffset.configure(foreground="black")
        self.TopOffset.configure(from_="0.0")
        self.TopOffset.configure(highlightbackground="black")
        self.TopOffset.configure(highlightcolor="black")
        self.TopOffset.configure(insertbackground="black")
        self.TopOffset.configure(selectbackground="#c4c4c4")
        self.TopOffset.configure(selectforeground="black")
        self.TopOffset.configure(textvariable=gui_utils.TopOffsetBox)
        self.TopOffset.configure(to="5000.0")
        self.TopOffset.configure(width=65)
        self.TopOffset.insert(0,'0')


        self.LeftOffset = Spinbox(self.InputOutputFrame, from_=0.0, to=5000.0)
        self.LeftOffset.place(relx=0.23, rely=0.68, relheight=0.12
                , relwidth=0.17)
        self.LeftOffset.configure(activebackground="#f9f9f9")
        self.LeftOffset.configure(background="white")
        self.LeftOffset.configure(buttonbackground="#d9d9d9")
        self.LeftOffset.configure(disabledforeground="#a3a3a3")
        self.LeftOffset.configure(foreground="black")
        self.LeftOffset.configure(from_="0.0")
        self.LeftOffset.configure(highlightbackground="black")
        self.LeftOffset.configure(highlightcolor="black")
        self.LeftOffset.configure(insertbackground="black")
        self.LeftOffset.configure(selectbackground="#c4c4c4")
        self.LeftOffset.configure(selectforeground="black")
        self.LeftOffset.configure(textvariable=gui_utils.LeftOffsetBox)
        self.LeftOffset.configure(to="5000.0")
        self.LeftOffset.configure(width=65)
        self.LeftOffset.insert(0,'0')

        self.ExitButton = Button(top, command=root.destroy)
        self.ExitButton.place(relx=0.64, rely=0.82, height=54, width=117)
        self.ExitButton.configure(activebackground="#d9d9d9")
        self.ExitButton.configure(activeforeground="#000000")
        self.ExitButton.configure(background="#ec0006")
        self.ExitButton.configure(disabledforeground="#a3a3a3")
        self.ExitButton.configure(font=font18)
        self.ExitButton.configure(foreground="#000000")
        self.ExitButton.configure(highlightbackground="#d9d9d9")
        self.ExitButton.configure(highlightcolor="black")
        self.ExitButton.configure(pady="0")
        self.ExitButton.configure(text='''Exit''')
        self.ExitButton.configure(width=117)

        self.RunButton = Button(top, command=self.runProgram)
        self.RunButton.place(relx=0.64, rely=0.65, height=54, width=117)
        self.RunButton.configure(activebackground="#d9d9d9")
        self.RunButton.configure(activeforeground="#000000")
        self.RunButton.configure(background="#33cf1d")
        self.RunButton.configure(disabledforeground="#a3a3a3")
        self.RunButton.configure(font=font18)
        self.RunButton.configure(foreground="#000000")
        self.RunButton.configure(highlightbackground="#d9d9d9")
        self.RunButton.configure(highlightcolor="black")
        self.RunButton.configure(pady="0")
        self.RunButton.configure(text='''Run''')
        self.RunButton.configure(width=117)

        self.EyeBall = ttk.Label(top)
        self.EyeBall.place(relx=0.02, rely=0.02, height=99, width=106)
        self.EyeBall.configure(background="#d9d9d9")
        self.EyeBall.configure(foreground="#000000")
        self.EyeBall.configure(relief=FLAT)
        self.EyeBall.configure(text='''Tlabel''')
        self.EyeBall.configure(width=106)
        self._img1 = PhotoImage(file=os.path.join(FOLDER_PATH, 'eye.gif'))
        self.EyeBall.configure(image=self._img1)

        self.Title = ttk.Label(top)
        self.Title.place(relx=0.3, rely=0.04, height=110, width=496)
        self.Title.configure(background="#d9d9d9")
        self.Title.configure(foreground="#000000")
        self.Title.configure(font=font21)
        self.Title.configure(relief=FLAT)
        self.Title.configure(text='''DeepEye''')
        self.Title.configure(width=496)
    
    def FlipState(self):
        self.test = self.windowCheck.get()
        if self.test == 0:
            self.WindowWidth['state'] = DISABLED
            self.WindowHeight['state'] = DISABLED
        elif self.test == 1:
            self.WindowWidth['state'] = NORMAL
            self.WindowHeight['state'] = NORMAL


    def runProgram(self):
        convertedThreshold = int(self.Threshold.get()[:-1])/100
        convertedWindowHeight = 0
        convertedWindowWidth = 0
        
        if self.windowCheck.get() == 1:
            convertedWindowHeight = int(self.WindowHeight.get())
            convertedWindowWidth = int(self.WindowWidth.get())
            
        convertedClassifier = ''
        if self.ClassifierCode.get() == 'Resnet101':
            convertedClassifier = 'faster_rcnn_resnet101_coco_2017_11_08'
        elif self.ClassifierCode.get() == 'Nas':
            convertedClassifier = 'faster_rcnn_nas_coco_2017_11_08'
        elif self.ClassifierCode.get() == 'Inception-Resnet':
            convertedClassifier = 'mask_rcnn_inception_v2_coco_coco_2017_11_08'
            
        convertedDataset = ''
        if self.DatasetCode.get() == 'Coco':
            convertedDataset = 'mscoco'
        elif self.DatasetCode.get() == 'Kitti':
            convertedDataset = 'kitti'

        adsa = DrivingAssistant()
        
        adsa.set_prams(
            convertedClassifier, 
            convertedDataset, 
            convertedThreshold,
            int(self.MonitorId.get()), 
            int(self.TopOffset.get()),
            int(self.LeftOffset.get()), 
            convertedWindowWidth, 
            convertedWindowHeight)

        adsa.activate()

        root.destroy()
